CONFIGURATION
    the name email line_editing default_editor

    git config --global user.name "faysla ali".. for the space bcz we have space in the name
    git config --global user.email faysal@gmail.com 
    git config --global core.editor "code --wait" .. we are telling it to wait until we close the new 
            window instance
    git config --global -e ... will open the default_editor to edit global settings


ENDOFLINES
    windows CR-LF(carriage return and line feed) \r \n
    mac/linux (LF-line feed) \n

    (in windows when user checks his code in to the repo,git should remove it from 
    end of lines and when user checks out from the repo, git should update endof lines 
    and add the CR Charracter
        set autocrlf = true)
    (when mac/linux user checks out from the repo , git shouldnt touch end of lines 
    and if added accidentally , git should remove it when storing in to the repository 
        set autocrlf = input ) 

    core.autocrlf
    git config --global core.autocrlf = input




CREATING SNAPSHOTS OF YOUR CODE 

    FILES     STAGING AREA      REPOSITORY(hiddend file in your directory)
    file1     using add file1   using commit with message
    rm file1  using add file1 
        `     will delete the file from staging area


    git compresses the content and doesnt store duplicate content 



    echo hello > file1.txt  write to a file1.txt
    echo hello >> file1.txt (>> means append)
    git add *.txt ... add all files with .txt extenstion

    git commit -m 'initial commit'... -m for message
    git commit ... to write shortdesc and long desc in the default editor

    git commit -am ""... -am(all modified files,m message)to stage and commit at the same time
                and directly to the repo
    git ls-files ... files in our stagging area
    rm file1.txt ... git add file1.txt ... to stage the deletion
    git rm file1.txt .. git removes the file from both the directory and staging area

    mv file1.txt main.js ... rename file1.txt to main.js
    git mv file1.txt main.js ... both renaming and moving files to stagging area

    git rm --cached file1.txt...removing file from staging area without removing it form 
        the directory


git status -s ... easier status check

GIT DIFF
    git diff --staged ... to see what we have in the staging area that is going to the next commit
    git diff HEAD~1 HEAD ... to see difference between the two commits


GIT LOG
    git log .... to see history of commits
    git log --oneline ... short summary of commit history
    gir log --oneline --reverse ...reverse the commit history order
    git log --oneline --stat ... more info about --oneline(to see files lines added)
    git log --oneline --after="2022-08-06"...  commits after this date 
    git log --oneline --before="2022-08-06"... commits before this date
    git log --oneline author="FaysalZaid"... its case sensitive
    git log --oneline -3 ... to see the last 3 commits
    git log --oneline file1.txt ... to see all the history of this specific file


GIT SHOW
    git show ... to see what exactly changed in specific commit 
    git show id  OR git partoftheid(as long as there is no another id that starts with that id)
    git show HEAD ... to see the last commit changes 
    git show HEAD~2 .. go down/ 2 steps from the last commit
    git show HEAD~1: .gitignore ... to see the last version of this commit or file
    git show HEAD~1 --name-only ... to see the files that have been commited in this commit specifically
    git show HEAD~1 --name-status ... to see the files modified/added in this specific commit


RESTORATION
    git restore --staged file1.txt ... restore file1 from the staging area (after file1.txt)
        the operations is in between staging area and the repo not staging area and working directory
    git restore file1.txt ... delete contents we added to this specific file/restore it from the repo 

    git clean ... remove untracked files 

    git restore --source=HEAD~1 file1.txt... restore file from previous snapshot (one before that last) by looking git log
        deleted file from the directory and from the staging area
        restoring file from the commit before the last one




CHECKING OUT -> it will restore our working directory to the snapshot stored in that commit  
    git checkout id(of the commit )
    every git repo has a default branch called master 
    as we create new commits master moves forward to point the last commit 
    bcz we can have multiple braches gi needs to know what is the branch we are currently working on to do that it uses 
        special pointer called head,with new commits head and master move together
        and when cheout the head pointer moves to that commit separating from the master and this is called 
            the detached head which means its not attached to a branch any more and in this we shouldnt create commit 
            and if created a commit it will attache it self to the master branch leaving the created commit alone
            to connect it with the master branch we do 


    git log --oneline file1.txt ... to see all the commits that have touched this file
    git checkout id file1.txt ... to checout file1 to its previous state or restoring it
    git add file1.txt .. to stage it before merging with the master branch / means save your new lines and stage them
    git checkout master




FINDING BUGS USING BISECT
    findig the commit that introduced the bug
    git bisect start
    git bisect bad ... to through the last commit as bad 
    git bisect good id(of a commit that was perfect)

        ---before
    HEAD -<if issue the bug was introduced somewhere in after commits  
    else if head is a good commit then whe check the before half of the commits
        ---after 



CONTRIBUTERS 

    git shortlog ... to see the contributers and summary of commit messages
    git sortlog -n ... sort based on the no of commits 
    git shortlog -s ... to supress the commits and show the name of the contributer with no of commits
    git shortlog -e ... to see email address of the contributer






BLAMING
    finding the auther of a particular line
    git blame file1.txt
    git blame -e file1.txt

TAGGING
    bookmark certain points in the history of our project like the commit that represent a given version
    git tag v1.0 ...to tag the last commit 
    git tag v1.0 id ... to tag specific commit
    git checkout v1.0 ... helps you checout using the tag
    git tag ... to see all the tags we have created 




BRANCHING->diverge from main line of work and work on something else in isolation
    isolated workspace
    allows us to work on different work items without messing with the main line of work 

    git branch bugfix ... creates branch with this name
    git brach ... to see list of braches
    git switch bugfix ... to switch to this branch
    git branch -m bugfix bugfix/sign-in-form ... to rename bugfix to the new name 
    git branch -d bugfix/sign-in-from ... to delete the branch( will ask you to merge it first)
    git branch -D bugfix/sign-in-form ... to force deleting the branch
    git log master..bug-fix/sign-in-form ... to see what changes are available in bugfix thats not in master 
    git diff --name-only bugfix  ... to see files that will be changed when merging 
    git diff bugfix ... this will also compare the current branch with the bugfix

    STACHES -> means storing it in a save place 
        git stash push -m "will come for more edditing"
            this will store it in a save place instead of committing changes 
        git stash list ... to see all the stashes 
        git stash show ... to see which line of codes was changed 
        git stash show 1 .... to see stash no one 
        git stash apply 1 ... to apply changes in this stash 
            when done we want to remove it 
        git stash drop 1 ... to drop the first stash from the stash list and clean it 
        git stash clear ... to remove all stashes 
    Merging -> bringing changes from one branch to another
        two types:
            1: fast-forwad merges -> if there are no changes in master but only in the new branch it will fast-forward the master and merge  
                if branches havent diverged
            2: 3-way merges -> the new commits from the master and the new changes in the new branch along with the previous 
            branch/snapshot and  git creates new commit to merge them and its called (merge commit)
                if branches diverged
    
        git log --oneline --all --graph  ... the graph flag gives us better representation of the branches 
        git merge bugfix ... to merge fastforward with the master branch 
        git merge --no-ff bugfix ... we are telling git even if there is fastforward dont do it 
        git config ff no ... this will disable fastforward automatically in your in your git
        git merge --- for both 3-way and fastforward 
        git branch --merged ... to see list of branches that merged 
        git branch --no-merged ... to see list of not merged branches 

        CONFILICTS:-> happen when same file has been changed in different ways in two branches  
                if file has been deleted in one branch and changed in another 
            git merge feature1 ... to enter the merging state and solve the conflict 
            git add file  ... to add the file 
            git commit ... and commit it 
            then you will have clean tree


        TOOLS FOR RESOLVING CONFILICTS
            kdiff 
            p4merge
            winmerge(windows only)


        P4MERGE-CONFIGURATION
            git config --global merge.tool p4merge ... for git configuation/ to use it as default merge tool 
            git config --global mergetool.p4merge.path ""  ... telling git where to find it 
            git mergetool 

        git merge --abort ... to abort the merging

        FAULTY MERGE 
            resetting a merge 
            resetting a head pointer we have 3 options 
                soft -> git will have the head pointer point to a differenct snapshot in the snapshot/repo 
                        staging area and working directory are not affected 
                mixed -> default option, it will put that snapshot and put it in the staging area 
                        staging area is affected
                hard  -> git will put that snapshot and put it in the working directory/stagingarea
                        both staging area and working directory are affected
                git reset --hard HEAD~1 ... to reset the merge one step before the last one 
                git reset --hard 123223 ... to reset to speicific id 

        IF SHARED HISTORY THEN WE USE REVERT INSTEAD OF RESET 
            git revert HEAD ... we want to revert the last commit, we also have to tell to revert to 1st parent of merge commit 
            git revert -m 1 HEAD ... to revert back to the parent commit that both merged branches come from  

SQUASHING -> Squashing a commit in Git means that you are taking the changes 
            from one commit and adding them to the Parent Commit
            git merge --squash bugfix
            git branch -D bugfix ... delete it 

GETTING A FILES FROM ANOTHER BRANCH/commit of another branch 
            git restore --source=bugfix --file1.txt




