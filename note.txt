CONFIGURATION
the name email line_editing default_editor

git config --global user.name "faysla ali".. for the space bcz we have space in the name
git config --global user.email faysal@gmail.com 
git config --global core.editor "code --wait" .. we are telling it to wait until we close the new 
        window instance
git config --global -e ... will open the default_editor to edit global settings


ENDOFLINES
    windows CR-LF(carriage return and line feed) \r \n
    mac/linux (LF-line feed) \n

    (in windows when user checks his code in to the repo,git should remove it from 
    end of lines and when user checks out from the repo, git should update endof lines 
    and add the CR Charracter
        set autocrlf = true)
    (when mac/linux user checks out from the repo , git shouldnt touch end of lines 
    and if added accidentally , git should remove it when storing in to the repository 
        set autocrlf = input ) 

    core.autocrlf
    git config --global core.autocrlf = input




CREATING SNAPSHOTS OF YOUR CODE 

FILES     STAGING AREA      REPOSITORY(hiddend file in your directory)
file1     using add file1   using commit with message
rm file1  using add file1 
    `     will delete the file from staging area


git compresses the content and doesnt store duplicate content 



echo hello > file1.txt  write to a file1.txt
echo hello >> file1.txt (>> means append)
git add *.txt ... add all files with .txt extenstion

git commit -m 'initial commit'... -m for message
git commit ... to write shortdesc and long desc in the default editor

git commit -am ""... -am(all modified files,m message)to skipp the stagging area 
            and directly to the repo
git ls-files ... files in our stagging area
rm file1.txt ... git add file1.txt ... to stage the deletion
git rm file1.txt .. git removes the file from both the directory and staging area

mv file1.txt main.js ... rename file1.txt to main.js
git mv file1.txt main.js ... both renaming and moving files to stagging area

git rm --cached file1.txt...removing file from staging area without removing it form 
    the directory
GITIGNORE


git status -s ... easier status check


git diff --staged ... to see what we have in the staging area that is going to the next commit


git log .... to see history of commits
git log --oneline ... short summary of commit history
gir log --oneline --reverse ...reverse the commit history order
git log --oneline --stat ... more info about --oneline(to see files lines added)
git log --oneline --after="2022-08-06"...  commits after this date 
git log --oneline --before="2022-08-06"... commits before this date
git log --oneline author="FaysalZaid"... its case sensitive



git show ... to see what exactly changed in specific commit 
git show id  OR git partoftheid(as long as there is no another id that starts with that id)
git show HEAD ... to see the last commit changes 
git show HEAD~2 .. go down/ 2 steps from the last commit
git show HEAD~1: .gitignore ... to see the last version of this commit or file
git show HEAD~1 --name-only ... to see the files that have been modified in this commit specifically

git restore --staged file1.txt ... restore file1 from the staging area (after file1.txt)
    the operations is in between staging area and the repo not staging area and working directory
git restore file1.txt ... delete contents we added to this specific file/restore it from the repo 

git clean ... remove untracked files 

git restore --source=HEAD~1 file1.txt... restore file from previous snapshot (one before that last) by looking git log
    deleted file from the directory and from the staging area
    restoring file from the commit before the last one
